---
AWSTemplateFormatVersion: "2010-09-09"
Description: eth2 Validator Node on AWS.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: # Application Group
          default: Application Configuration
        Parameters:
          - ApplicationInstanceType
          - ApplicationInstanceStorageSize
          - ImageId
          - ApplicationName
          - TrustedCIDR
          - KeyName

    ParameterLabels:
      # Application Label
      ApplicationInstanceType:
        default: ApplicationInstanceType
      ApplicationInstanceStorageSize:
        default: ApplicationInstanceStorageSize
      ApplicationKeyName:
        default: ApplicationKeyName
      ImageId:
        default: ImageId
      ApplicationName:
        default: ApplicationName
      TrustedCIDR:
        default: TrustedCIDR
      KeyName:
        default: KeyName

Parameters:
  # Application Parameters
  ApplicationInstanceType:
    Description: Application server EC2 instance type.
    Type: String
    Default: r5.large
  ApplicationInstanceStorageSize:
    Description: Application server storage size (in GBs)
    Type: Number
    Default: "1000"
  ImageId:
    Description: ImageId for OS type. (Change this if your not in us-east-1). I recommend the latest Amazon Linux 2 AMI.
    Type: String
    Default: ami-04bf6dcdc9ab498ca
  ApplicationName:
    Description: Application Name
    Type: String
    Default: eth2-validator-mainnet
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Can contain only ASCII characters.
  TrustedCIDR:
    Description: The Source CIDR allowed to access the node via SSH. Change this to your WAN IP.
    Type: String

Resources:
  # Network
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Subnet
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub ${VPC}-IGW1

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${VPC}-route-table
        - Key: "Gateway"
          Value: !Ref GatewayToInternet

  RouteHub:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable

  # Application Resources
  ApplicationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ELBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ec2:*
                Resource: "*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
  ApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ApplicationInstanceRole

  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  ENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ApplicationName
      Description: An EIP.
      GroupSet:
        - !GetAtt ApplicationInstanceSecurityGroup.GroupId
      SourceDestCheck: true
      SubnetId: !Ref Subnet

  Association:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      NetworkInterfaceId: !Ref ENI

  ApplicationEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref ApplicationInstanceType
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref ENI
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize:
              Ref: ApplicationInstanceStorageSize
            VolumeType: gp2
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      Tags:
        - Key: Name
          Value: !Ref ApplicationName
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          disable_root: true
          repo_update: true
          repo_upgrade: all

          packages:
          - python-setuptools
          - python3-pip
          - jq
          - git
          - curl
          - nfs-common
          - htop

          runcmd:
          - |
            #!/bin/bash -x
            # This is Amazon Linux 2 Specific, you will have to update if you use a different distro.
            amazon-linux-extras install docker
            systemctl enable docker.service
            systemctl start docker.service
            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            chmod 755 /usr/local/bin/docker-compose
            usermod -aG docker ec2-user
            cd /home/ec2-user
            git clone https://github.com/eth2-educators/eth2-docker.git
            chown -R ec2-user /home/ec2-user/

  ApplicationInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH from Trusted Locations, and enable necessary eth2 node ports to the world.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "12000"
          ToPort: "12000"
          IpProtocol: udp
        - CidrIp: 0.0.0.0/0
          FromPort: "13000"
          ToPort: "13000"
          IpProtocol: tcp
        - CidrIp: !Ref TrustedCIDR
          FromPort: "22"
          ToPort: "22"
          IpProtocol: tcp
