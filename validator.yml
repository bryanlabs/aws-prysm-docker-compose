---
AWSTemplateFormatVersion: "2010-09-09"
Description: Prysm Validator Node on AWS EC2 via prysm-docker-compose.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: # Application Group
          default: Application Configuration
        Parameters:
          - ApplicationInstanceType
          - ApplicationInstanceStorageSize
          - ApplicationInstanceStorageType
          - ApplicationInstanceStorageIOPS
          - Ubuntu18ImageId
          - ApplicationName
          - GraffanaTrustedCIDR
          - KeyName
          - GethOptions
          - BeaconOptions
          - ValidatorOptions
          - PrometheusOptions

    ParameterLabels:
      # Application Label
      ApplicationInstanceType:
        default: ApplicationInstanceType
      ApplicationInstanceStorageSize:
        default: ApplicationInstanceStorageSize
      ApplicationInstanceStorageType:
        default: ApplicationInstanceStorageType
      ApplicationInstanceStorageIOPS:
        default: ApplicationInstanceStorageIOPS
      ApplicationKeyName:
        default: ApplicationKeyName
      Ubuntu18ImageId:
        default: Ubuntu18ImageId
      ApplicationName:
        default: ApplicationName
      GraffanaTrustedCIDR:
        default: GraffanaTrustedCIDR
      KeyName:
        default: KeyName
      GethOptions:
        default: GethOptions
      BeaconOptions:
        default: BeaconOptions
      ValidatorOptions:
        default: ValidatorOptions
      PrometheusOptions:
        default: PrometheusOptions

Parameters:
  # Application Parameters
  ApplicationInstanceType:
    Description: Application server EC2 instance type
    Type: String
    Default: r5a.large
  ApplicationInstanceStorageSize:
    Description: Application server storage size (in GBs)
    Type: Number
    Default: "100"
  ApplicationInstanceStorageType:
    Description: "Application server storage type. Allowed values are: standard, io1, gp2."
    Type: String
    Default: standard
    AllowedValues:
      - standard
      - io1
      - gp2
  ApplicationInstanceStorageIOPS:
    Description: Application server storage IOPS. Used only when storage type is set to
      io1.
    Type: Number
    MinValue: "100"
    MaxValue: "20000"
    Default: 100
  Ubuntu18ImageId:
    Description: ImageId for Ubuntu18 (Change this if your not in us-east-1)
    Type: String
    Default: ami-0817d428a6fb68645
  ApplicationName:
    Description: Application Name
    Type: String
    Default: Prysm Medalla Validator
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Can contain only ASCII characters.
  GraffanaTrustedCIDR:
    Description: The Source CIDR allowed to access the Grafana Dashboard. Use 0.0.0.0/0 to allow all.
    Type: String
    Default: 0.0.0.0/0
  GethOptions:
    Description: Geth options
    Type: String
    Default: --goerli --rpc --rpcport=8545 --rpcaddr=0.0.0.0 --rpcvhosts="*" --allow-insecure-unlock --rpcapi="db,eth,net,web3,personal"
  BeaconOptions:
    Description: Beacon options
    Type: String
    Default: --medalla --head-sync --http-web3provider http://localhost:8545 --enable-db-backup-webhook --p2p-tcp-port 13000 --rpc-host 0.0.0.0 --monitoring-host 0.0.0.0 --accept-terms-of-use
  ValidatorOptions:
    Description: Validator options
    Type: String
    Default: --medalla --wallet-password-file /home/ubuntu/prysm/wallet.password --accept-terms-of-use
  PrometheusOptions:
    Description: Prometheus Options
    Type: String
    Default: --config.file /etc/prometheus/prometheus.yml --web.console.templates=/etc/prometheus/consoles  --web.console.libraries=/etc/prometheus/console_libraries

Conditions:
  ApplicationStorageWithIOPSCondition: !Equals [!Ref ApplicationInstanceStorageType, io1]

Resources:
  # Network
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.254.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.255.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub ${VPC}-IGW1

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${VPC}-public-route-table1
        - Key: "Gateway"
          Value: !Ref GatewayToInternet

  PublicRoute1Hub:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  # Application Resources
  ApplicationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ELBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ec2:*
                Resource: "*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
  ApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ApplicationInstanceRole

  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  ENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ApplicationName
      Description: An EIP.
      GroupSet:
        - !GetAtt ApplicationInstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1

  Association:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      NetworkInterfaceId: !Ref ENI

  InterfaceAttachment:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
      InstanceId: !Ref ApplicationEC2Instance
      NetworkInterfaceId: !Ref ENI
      DeviceIndex: "1"

  ApplicationEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install application
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - 04_config_prysm
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        01_setupCfnHup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            "/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: "000400"
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service

        02_config-amazon-cloudwatch-agent:
          files:
            "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json":
              content: |
                {
                    "agent": {
                        "metrics_collection_interval": 60,
                        "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                        "debug": false
                    },
                    "logs": {
                        "logs_collected": {
                            "files": {
                                "collect_list": [
                                    {
                                        "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                                        "log_group_name": "amazon-cloudwatch-agent.log",
                                        "log_stream_name": "{instance_id}",
                                        "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                                    },
                                    {
                                        "file_path": "/var/log/syslog",
                                        "log_group_name": "/aws/linux/var/log/syslog",
                                        "log_stream_name": "{instance_id}",
                                        "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                                    },
                                    {
                                        "file_path": "/var/log/auth.log",
                                        "log_group_name": "/aws/linux/var/log/auth",
                                        "log_stream_name": "{instance_id}",
                                        "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                                    },
                                    {
                                        "file_path": "/var/log/dpkg.log",
                                        "log_group_name": "/aws/linux/var/log/dpkg",
                                        "log_stream_name": "{instance_id}",
                                        "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                                    },
                                    {
                                        "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log",
                                        "log_group_name": "/amazon/ssm/amazon-ssm-agent",
                                        "log_stream_name": "{instance_id}",
                                        "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                                    }
                                ]
                            }
                        },
                        "force_flush_interval" : 15
                    },
                    "metrics": {
                        "metrics_collected": {
                            "collectd": {},
                            "cpu": {
                                "resources": [
                                    "*"
                                ],
                                "measurement": [
                                    {
                                        "name": "cpu_usage_idle",
                                        "rename": "CPU_USAGE_IDLE",
                                        "unit": "Percent"
                                    },
                                    {
                                        "name": "cpu_usage_nice",
                                        "unit": "Percent"
                                    },
                                    "cpu_usage_guest"
                                ],
                                "totalcpu": false,
                                "metrics_collection_interval": 10,
                                "append_dimensions": {
                                    "test": "test1",
                                    "date": "2017-10-01"
                                }
                            },
                            "netstat": {
                                "measurement": [
                                    "tcp_established",
                                    "tcp_syn_sent",
                                    "tcp_close"
                                ],
                                "metrics_collection_interval": 60
                            },
                            "disk": {
                                "measurement": [
                                    "used_percent"
                                ],
                                "resources": [
                                    "*"
                                ],
                                "drop_device": true
                            },
                            "processes": {
                                "measurement": [
                                    "running",
                                    "sleeping",
                                    "dead"
                                ]
                            }
                        },
                        "append_dimensions": {
                            "ImageId": "${aws:ImageId}",
                            "InstanceId": "${aws:InstanceId}",
                            "InstanceType": "${aws:InstanceType}"
                        },
                        "aggregation_dimensions": [
                            [
                                "InstanceId",
                                "InstanceType"
                            ],
                            []
                        ]
                    }
                }

        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

        04_config_prysm:
          files:
            "/etc/systemd/system/geth.service":
              content: !Sub |
                [Unit]
                Description=Ethereum go client

                [Service]
                ExecStart=/usr/bin/geth ${GethOptions}
                Restart=always
                User=ubuntu

                [Install]
                WantedBy=multi-user.target
            "/etc/systemd/system/beacon.service":
              content: !Sub |
                [Unit]
                Description=Prysm beacon-chain client

                [Service]
                ExecStart=/home/ubuntu/prysm/prysm.sh beacon-chain ${BeaconOptions}
                Restart=always
                User=ubuntu

                [Install]
                WantedBy=multi-user.target
            "/etc/systemd/system/validator.service":
              content: !Sub |
                [Unit]
                Description=Prysm validator client

                [Service]
                WorkingDirectory=/home/ubuntu/prysm
                User=ubuntu
                Restart=always
                ExecStart=/home/ubuntu/prysm/prysm.sh validator ${ValidatorOptions}
                [Install]
                WantedBy=default.target
            "/etc/systemd/system/prometheus.service":
              content: !Sub |
                [Unit]
                Description=prometheus client

                [Service]
                WorkingDirectory=/home/ubuntu/prometheus
                User=ubuntu
                ExecStart=/home/ubuntu/prometheus/prometheus ${PrometheusOptions}
                [Install]
                WantedBy=default.target
            "/etc/prometheus/prometheus.yml":
              content: !Sub |
                global:
                  scrape_interval: 15s

                scrape_configs:
                  - job_name: 'prometheus'
                    scrape_interval: 5s
                    static_configs:
                    - targets: ['127.0.0.1:9090']
                  - job_name: 'beacon'
                    scrape_interval: 5s
                    static_configs:
                    - targets: ['127.0.0.1:8080']
                  - job_name: 'node_exporter'
                    scrape_interval: 5s
                    static_configs:
                    - targets: ['127.0.0.1:9100']
                  - job_name: 'validator'
                    scrape_interval: 5s
                    static_configs:
                    - targets: ['127.0.0.1:8081']
                  - job_name: 'ping_google'
                    metrics_path: /probe
                    params:
                      module: [icmp]
                    static_configs:
                      - targets:
                        - 8.8.8.8
                    relabel_configs:
                      - source_labels: [__address__]
                        target_label: __param_target
                      - source_labels: [__param_target]
                        target_label: instance
                      - target_label: __address__
                        replacement: 127.0.0.1:9115  # The blackbox exporter's real hostname:port.
                  - job_name: 'ping_cloudflare'
                    metrics_path: /probe
                    params:
                      module: [icmp]
                    static_configs:
                      - targets:
                        - 1.1.1.1
                    relabel_configs:
                      - source_labels: [__address__]
                        target_label: __param_target
                      - source_labels: [__param_target]
                        target_label: instance
                      - target_label: __address__
                        replacement: 127.0.0.1:9115  # The blackbox exporter's real hostname:port.
            "/install_prysm.sh":
              content: !Sub |
                #!/bin/bash -x
                DEBIAN_FRONTEND=noninteractive && dpkg --configure -a
                add-apt-repository -y ppa:ethereum/ethereum
                apt-get install -y ethereum

                # Geth
                systemctl enable geth.service
                systemctl start geth.service

                # Prysm
                su - ubuntu --command='git clone https://github.com/prysmaticlabs/prysm'
                systemctl enable beacon.service
                systemctl start beacon.service
                systemctl enable validator.service
                systemctl start validator.service

                #Grafana
                sudo apt-get install -y apt-transport-https
                sudo apt-get install -y software-properties-common wget
                wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
                echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list 
                sudo apt-get update
                sudo apt-get install -y grafana
                sudo /bin/systemctl daemon-reload
                sudo systemctl enable grafana-server.service
                sudo systemctl start grafana-server.service

                # Prometheus
                curl -Lo prometheus.tar.gz https://github.com/prometheus/prometheus/releases/download/v2.22.0-rc.0/prometheus-2.22.0-rc.0.linux-amd64.tar.gz
                tar -zxvf prometheus.tar.gz
                mv prometheus-* prometheus
                sudo mkdir -p /etc/prometheus/console_libraries /etc/prometheus/consoles /etc/prometheus/files_sd /etc/prometheus/rules /etc/prometheus/rules.d
                systemctl enable prometheus.service
                systemctl start prometheus.service

          commands:
            04_config_prysm:
              command: bash /install_prysm.sh
    Properties:
      ImageId: !Ref Ubuntu18ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref ApplicationInstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          GroupSet:
            - !GetAtt ApplicationInstanceSecurityGroup.GroupId
          SubnetId: !Ref PublicSubnet1

      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize:
              Ref: ApplicationInstanceStorageSize
            VolumeType:
              Ref: ApplicationInstanceStorageType
            Iops:
              Fn::If:
                - ApplicationStorageWithIOPSCondition
                - !Ref ApplicationInstanceStorageIOPS
                - !Ref AWS::NoValue
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      Tags:
        - Key: Name
          Value: !Ref ApplicationName
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          disable_root: true
          repo_update: true
          repo_upgrade: all

          packages:
          - python-setuptools
          - python3-pip
          - postgresql-client
          - jq
          - curl
          - nfs-common
          - htop
          - collectd

          runcmd:
          - |
            #!/bin/bash -x
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
            dpkg -i /tmp/amazon-cloudwatch-agent.deb
            mkdir -p /opt/aws/bin
            python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.${AWS::URLSuffix}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource ApplicationEC2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationEC2Instance --region ${AWS::Region}

  ApplicationInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH from NetworkLoadbalancer, and HTTP from ApplicationLoadbalancer.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "12000"
          ToPort: "12000"
          IpProtocol: udp
        - CidrIp: 0.0.0.0/0
          FromPort: "13000"
          ToPort: "13000"
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: "3000"
          ToPort: "3000"
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: "22"
          ToPort: "22"
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: "4242"
          ToPort: "4242"
          IpProtocol: tcp
